#ifndef TOY_OPS
#define TOY_OPS

include "mlir/IR/DialectBase.td"
include "mlir/IR/OpBase.td"
include "mlir/Interfaces/SideEffectInterfaces.td"
include "mlir/IR/FunctionInterfaces.td"
// include "mlir/Interfaces/FunctionInterfaces.td"

def Toy_Dialect : Dialect {
	let name = "toy";

	let summary = [{
		The Toy language is a tensor-based language that allows you to define
		functions, perform some math computation, and print results. This dialect
		provides a representation of the language that is amenable to analysis and
		optimization.
	}];

	let cppNamespace = "toy";
}

// Base Class for toy dialect operations.
class Toy_Op<string mnemonic, list<Trait> traits = []> :
	Op<Toy_Dialect, mnemonic, traits>;

// Toy Operations

// ConstantOp
def ConstantOp : Toy_Op<"constant"> {

	let summary = "constant operation";
	let description = [{
    Constant operation turns a literal into an SSA value. The data is attached
    to the operation as an attribute. For example:

      %0 = "toy.constant"()
         { value = dense<[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]> : tensor<2x3xf64> }
        : () -> tensor<2x3xf64>
	}];

	// The constant operation takes an attribute as the only input.
	// `F64ElementsAttr` corresponds to a 64-bit floating-point ElementsAttr.
	let arguments = (ins F64ElementsAttr:$value);

	// The constant operation returns a single value of TensorType.
	// F64Tensor corresponds to a 64-bit floating-point TensorType.
	let results = (outs F64Tensor);

	let builders = [
		// build a constant with a given constant tensor type.
		OpBuilder<(ins "::mlir::DenseElementsAttr":$value), [{
			// Call into an autogenerated `build` method.
			build($_builder, $_state, value.getType(), value);
		}]>,

		OpBuilder<(ins "double":$value)>
	];

	let hasVerifier = 1;
}

// AddOp
def AddOp : Toy_Op<"add"> {
	let summary = "element-wise add operation";
	let description = [{
		The "add" operation performs element-wise addition between two tensors.
		The shapes of the tensor operands are expected to match.
	}];

	let arguments = (ins F64Tensor:$lhs, F64Tensor:$rhs);
	let results = (outs F64Tensor);

	// Allow building an AddOp with from two input operands.
	// `mlir::Value` is the type
	let builders = [
		OpBuilder<(ins "mlir::Value":$lhs, "mlir::Value":$rhs)>
	];
}

// FuncOp
// traitをattachしている。
// https://mlir.llvm.org/docs/Traits/
def FuncOp : Toy_Op<"func", [
	FunctionOpInterface, IsolatedFromAbove
]> {
	let summary = "user defined function operation";
	let description = [{
		The "toy.func" operation represents a user defined function. These are
		callable SSA-region operations that contain toy computations.

		Example.

		```mlir
		toy.func@main() {
			%0 = toy.constant() dense<5.500000e+00> : tensor<f64>
			%1 = toy.reshape(%0 : tensor<f64>) to tensor<2x2xf64>
			toy.print %1 : tensor<2x2xf64>
			toy.return
		}
	}];

	let arguments = (ins 
		SymbolNameAttr:$sym_name,
		TypeAttrOf<FunctionType>:$function_type,
		OptionalAttr<DictArrayAttr>:$arg_attrs,
		OptionalAttr<DictArrayAttr>:$res_attrs
	);
	let regions = (region AnyRegion:$body);

	let builders = [
		OpBuilder<(ins
			"mlir::StringRef":$name, "mlir::FunctionType":$type,
			CArg<"mlir::ArrayRef<mlir::NamedAttribute>", "{}">:$attrs
		)>
	];

	let extraClassDeclaration = [{
		// FunctionOpInterface Methods
		
		/// Return the argument types of this function.
		mlir::ArrayRef<mlir::Type> getArgumentTypes() { return getFunctionType().getInputs(); }

		/// Return the result types of this function.
		mlir::ArrayRef<mlir::Type> getResultTypes() { return getFunctionType().getResults(); }

		mlir::Region *getCallableRegion() { return &getBody(); }
	}];

	let skipDefaultBuilders = 1;
}

// Return Op

def ReturnOp : Toy_Op<"return", [Pure, HasParent<"FuncOp">, Terminator]> {
	let summary = "return operation";

	let description = [{
		The "return" operation represents a return operation within a function.
		The operation takes an optional tensor operand and produces no result.
		The operand type must match the signature of the function that contains
		the operation. For example:

		```mlir
		  toy.func @foo() -> tensor<2xf64> {
				...
				toy.return %0 : tensor<2xf64>
			}
		```
	}];

	// The return operation takes an optional input operand to return. This
	// value must match the return type of the enclosing function.
	let arguments = (ins Variadic<F64Tensor>:$input);

	// The return operation only emits the input in the format if it is present.
	// `hasCustomAssemblyFormat`を使うんではなくて、こういう指定方法もあるっぽい
	let assemblyFormat = "($input^ `:` type($input))? attr-dict";

	// Allow building a ReturnOp with no return operand.
	// builderの引数なし。インラインでC++のコードを書いている。
	let builders = [
		OpBuilder<(ins), [{ build($_builder, $_state, std::nullopt); }]>
	];

	// Provide extra utility definitions on the c++ operation class definition.
	let extraClassDeclaration = [{
		bool hasOperand() { return getNumOperands() != 0; }
	}];

	// Invoke a static verify method to verify this return operation.
	let hasVerifier = 1;
}

#endif // TOY_OPS