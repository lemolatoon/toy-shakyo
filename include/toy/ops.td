#ifndef TOY_OPS
#define TOY_OPS

include "mlir/IR/DialectBase.td"
include "mlir/IR/OpBase.td"

def Toy_Dialect : Dialect {
	let name = "toy";

	let summary = [{
		The Toy language is a tensor-based language that allows you to define
		functions, perform some math computation, and print results. This dialect
		provides a representation of the language that is amenable to analysis and
		optimization.
	}];

	let cppNamespace = "toy";
}

// Base Class for toy dialect operations.
class Toy_Op<string mnemonic, list<Trait> traits = []> :
	Op<Toy_Dialect, mnemonic, traits>;

// Toy Operations

// ConstantOp
def ConstantOp : Toy_Op<"constant"> {

	let summary = "constant operation";
	let description = [{
    Constant operation turns a literal into an SSA value. The data is attached
    to the operation as an attribute. For example:

      %0 = "toy.constant"()
         { value = dense<[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]> : tensor<2x3xf64> }
        : () -> tensor<2x3xf64>
	}];

	// The constant operation takes an attribute as the only input.
	// `F64ElementsAttr` corresponds to a 64-bit floating-point ElementsAttr.
	let arguments = (ins F64ElementsAttr:$value);

	// The constant operation returns a single value of TensorType.
	// F64Tensor corresponds to a 64-bit floating-point TensorType.
	let results = (outs F64Tensor);

	let builders = [
		// build a constant with a given constant tensor type.
		OpBuilder<(ins "::mlir::DenseElementsAttr":$value), [{
			// Call into an autogenerated `build` method.
			build($_builder, $_state, value.getType(), value);
		}]>,

		OpBuilder<(ins "double":$value)>
	];

	let hasVerifier = 1;
}

// AddOp
def AddOp : Toy_Op<"add"> {
	let summary = "element-wise add operation";
	let description = [{
		The "add" operation performs element-wise addition between two tensors.
		The shapes of the tensor operands are expected to match.
	}];

	let arguments = (ins F64Tensor:$lhs, F64Tensor:$rhs);
	let results = (outs F64Tensor);

	// Allow building an AddOp with from two input operands.
	// `mlir::Value` is the type
	let builders = [
		OpBuilder<(ins "mlir::Value":$lhs, "mlir::Value":$rhs)>
	];
}

#endif // TOY_OPS