#ifndef TOY_OPS
#define TOY_OPS

include "mlir/IR/DialectBase.td"
include "mlir/IR/OpBase.td"
include "mlir/Interfaces/SideEffectInterfaces.td"
include "mlir/IR/FunctionInterfaces.td"
include "mlir/Interfaces/CastInterfaces.td"
include "mlir/Interfaces/CallInterfaces.td"
// include "mlir/Interfaces/FunctionInterfaces.td"

include "toy/shapeInferenceInterface.td"

def Toy_Dialect : Dialect {
	let name = "toy";

	let summary = [{
		The Toy language is a tensor-based language that allows you to define
		functions, perform some math computation, and print results. This dialect
		provides a representation of the language that is amenable to analysis and
		optimization.
	}];

	let cppNamespace = "toy";
}

// Base Class for toy dialect operations.
class Toy_Op<string mnemonic, list<Trait> traits = []> :
	Op<Toy_Dialect, mnemonic, traits>;

// Toy Operations

// ConstantOp
def ConstantOp : Toy_Op<"constant", [Pure]> {

	let summary = "constant operation";
	let description = [{
    Constant operation turns a literal into an SSA value. The data is attached
    to the operation as an attribute. For example:

      %0 = "toy.constant"()
         { value = dense<[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]> : tensor<2x3xf64> }
        : () -> tensor<2x3xf64>
	}];

	// The constant operation takes an attribute as the only input.
	// `F64ElementsAttr` corresponds to a 64-bit floating-point ElementsAttr.
	let arguments = (ins F64ElementsAttr:$value);

	// The constant operation returns a single value of TensorType.
	// F64Tensor corresponds to a 64-bit floating-point TensorType.
	let results = (outs F64Tensor);

	let builders = [
		// build a constant with a given constant tensor type.
		OpBuilder<(ins "::mlir::DenseElementsAttr":$value), [{
			// Call into an autogenerated `build` method.
			build($_builder, $_state, value.getType(), value);
		}]>,

		OpBuilder<(ins "double":$value)>
	];

	let hasVerifier = 1;
}

// AddOp
def AddOp : Toy_Op<"add", [Pure, DeclareOpInterfaceMethods<ShapeInferenceOpInterface>]> {
	let summary = "element-wise add operation";
	let description = [{
		The "add" operation performs element-wise addition between two tensors.
		The shapes of the tensor operands are expected to match.
	}];

	let arguments = (ins F64Tensor:$lhs, F64Tensor:$rhs);
	let results = (outs F64Tensor);

	// Allow building an AddOp with from two input operands.
	// `mlir::Value` is the type
	let builders = [
		OpBuilder<(ins "mlir::Value":$lhs, "mlir::Value":$rhs)>
	];
}

// FuncOp
// traitをattachしている。
// FunctionOpInterfaceが、CallableOpInterfaceの宣言をしている。
// https://mlir.llvm.org/docs/Traits/
def FuncOp : Toy_Op<"func", [
	FunctionOpInterface, 
	IsolatedFromAbove,
	DeclareOpInterfaceMethods<CallableOpInterface>,
]> {
	let summary = "user defined function operation";
	let description = [{
		The "toy.func" operation represents a user defined function. These are
		callable SSA-region operations that contain toy computations.

		Example.

		```mlir
		toy.func@main() {
			%0 = toy.constant() dense<5.500000e+00> : tensor<f64>
			%1 = toy.reshape(%0 : tensor<f64>) to tensor<2x2xf64>
			toy.print %1 : tensor<2x2xf64>
			toy.return
		}
	}];

	let arguments = (ins 
		SymbolNameAttr:$sym_name,
		TypeAttrOf<FunctionType>:$function_type,
		OptionalAttr<DictArrayAttr>:$arg_attrs,
		OptionalAttr<DictArrayAttr>:$res_attrs
	);
	let regions = (region AnyRegion:$body);

	let builders = [
		OpBuilder<(ins
			"mlir::StringRef":$name, "mlir::FunctionType":$type,
			CArg<"mlir::ArrayRef<mlir::NamedAttribute>", "{}">:$attrs
		)>
	];

	let extraClassDeclaration = [{
		// FunctionOpInterface Methods
		
		/// Return the argument types of this function.
		mlir::ArrayRef<mlir::Type> getArgumentTypes() { return getFunctionType().getInputs(); }

		/// Return the result types of this function.
		mlir::ArrayRef<mlir::Type> getResultTypes() { return getFunctionType().getResults(); }

	}];

	let hasCustomAssemblyFormat = 1;
	let skipDefaultBuilders = 1;
}

// Return Op

def ReturnOp : Toy_Op<"return", [Pure, HasParent<"FuncOp">, Terminator]> {
	let summary = "return operation";

	let description = [{
		The "return" operation represents a return operation within a function.
		The operation takes an optional tensor operand and produces no result.
		The operand type must match the signature of the function that contains
		the operation. For example:

		```mlir
		  toy.func @foo() -> tensor<2xf64> {
				...
				toy.return %0 : tensor<2xf64>
			}
		```
	}];

	// The return operation takes an optional input operand to return. This
	// value must match the return type of the enclosing function.
	let arguments = (ins Variadic<F64Tensor>:$input);

	// The return operation only emits the input in the format if it is present.
	// `hasCustomAssemblyFormat`を使うんではなくて、こういう指定方法もあるっぽい
	let assemblyFormat = "($input^ `:` type($input))? attr-dict";

	// Allow building a ReturnOp with no return operand.
	// builderの引数なし。インラインでC++のコードを書いている。
	let builders = [
		OpBuilder<(ins), [{ build($_builder, $_state, std::nullopt); }]>
	];

	// Provide extra utility definitions on the c++ operation class definition.
	let extraClassDeclaration = [{
		bool hasOperand() { return getNumOperands() != 0; }
	}];

	// Invoke a static verify method to verify this return operation.
	let hasVerifier = 1;
}

// PrintOp

def PrintOp : Toy_Op<"print"> {
	let summary = "print operation";
	let description = [{
		The "print" builtin operation prints a given input tensor, and produces
		no results.
	}];

	// The print operation takes a input tensor to print.
	// We also allow a F64MemRef to enable interop during partial lowering.
	let arguments = (ins AnyTypeOf<[F64Tensor, F64MemRef]>:$input);

	let assemblyFormat = "$input attr-dict `:` type($input)";
}

// GenericCallOp

def GenericCallOp : Toy_Op<"generic_call",
	[DeclareOpInterfaceMethods<CallOpInterface>]> {
	let summary = "generic call operation";

	let description = [{
		Generic calls represent calls to a user defined function that needs to
		be specialized for the shape of its arguments. The callee name is attached
		as a symbol reference via an attribute. The arguments list must match the
		arguments expected by the callee. For example:

		```mlir
			%4 = toy.generic_call @my_func(%1, %2)
				: (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<*xf64>
		```

		This is only valid if a function named "my_func" exists and takes two
		arguments.
	}];

	// The generic call operation takes a symbol reference attributes as the
	// callee, and inputs for the call.
	let arguments = (ins FlatSymbolRefAttr:$callee, Variadic<F64Tensor>:$inputs);

  // The generic call operation returns a single value of TensorType.
	let results = (outs F64Tensor);

	// Specialize assembly printing and parsing using a declarative format.
	let assemblyFormat = [{
		$callee `(` $inputs `)` attr-dict `:` functional-type($inputs, results)
	}];

	// Add custom build methods for the generic call operation.
	let builders = [
		OpBuilder<(ins "mlir::StringRef":$callee, "mlir::ArrayRef<mlir::Value>":$arguments)>
	];
}

// MulOp

def MulOp : Toy_Op<"mul", [Pure, DeclareOpInterfaceMethods<ShapeInferenceOpInterface>]> {
	let summary = "element-wise mul operation";
	let description = [{
		The "mul" operation performs element-wise multiplication between two
		tensors. The shapes of the tensor operands are expected to match.
	}];

	let arguments = (ins F64Tensor:$lhs, F64Tensor:$rhs);
	let results = (outs F64Tensor);

	// Allow building a MulOp with from the two input operands.
	let builders = [
		OpBuilder<(ins "mlir::Value":$lhs, "mlir::Value":$rhs)>
	];
}

// ReshapeOp

def ReshapeOp : Toy_Op<"reshape", [Pure]> {
	let summary = "tensor reshape operation";

	let description = [{
		Reshape operation is transforming its input tensor into a new tensor with
		the same number of elements but different shapes. For example:

		```mlir
			%0 = toy.reshape (%arg1 : tensor<10xf64>) to tensor<5x2xf64>
		```
	}];

	let arguments = (ins F64Tensor:$input);

	// We expect that the reshape operation returns a tatically shaped tensor.
	let results = (outs StaticShapeTensorOf<[F64]>);

	let assemblyFormat = [{
		`(` $input `:` type($input) `)` attr-dict `to` type(results)
	}];

	let hasCanonicalizer = 1;
}

// TransposeOp

def TransposeOp : Toy_Op<"transpose", [Pure, DeclareOpInterfaceMethods<ShapeInferenceOpInterface>]> {
	let summary = "transpose operation";

	let arguments = (ins F64Tensor:$input);
	let results = (outs F64Tensor);

	let assemblyFormat = [{
		`(` $input `:` type($input) `)` attr-dict `to` type(results)
	}];

	// Allow building a TransposeOp with from the input operand.
	let builders = [
		OpBuilder<(ins "mlir::Value":$input)>
	];

	// Invoke a static verify method to verify this transpose operation.
	let hasVerifier = 1;
	let hasCanonicalizer = 1;
}

// CastOp

// CastOpInterfaceのareCastCompatibleを.cpp側で実装する必要がある。
def CastOp : Toy_Op<"cast", [
	DeclareOpInterfaceMethods<CastOpInterface>,
	DeclareOpInterfaceMethods<ShapeInferenceOpInterface>,
	Pure,
	SameOperandsAndResultShape
]> {
	let summary = "shape cast operation";
	let description = [{
		The "cast" operation converts a tensor from one type to an equivalent type
		without changing any data elements. The source and destination types must
		both be tensor types with the same element type. If both are ranked, then
		shape is required to match. The operation is invalid if converting to a
		mismatching constant dimension.
	}];

	let arguments = (ins F64Tensor:$input);
	let results = (outs F64Tensor:$output);

	let assemblyFormat = "$input attr-dict `:` type($input) `to` type($output)";
}

#endif // TOY_OPS