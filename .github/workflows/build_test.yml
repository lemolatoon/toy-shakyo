# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: build and test on a single platform

on:
  push:
    branches: ["with-llvm", "master"]
  pull_request:
    branches: ["with-llvm", "master"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - uses: friendlyanon/setup-vcpkg@v1
        with: { committish: 6a349fe1fbea1e5fcda2e0775f555d829a5e82df }

      - name: Additional Dependencies
        run: sudo apt-get install -y autoconf-archive
      
      - name: Install LLVM 16
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16
          apt list | grep llvm-16
          sudo apt-get install llvm-16
          llvm-config-16 --version

      - name: Tools version
        run: |
          cmake --version
          ninja --version
          g++ --version
          vcpkg --version
          llvm-config-16 --version

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: make configure CMAKE_EXTRA_ARGS="-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"

      - name: Build
        # Build your program with the given configuration
        run: make build CMAKE_EXTRA_ARGS="-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"

      - name: Test
        run: make test CMAKE_EXTRA_ARGS="-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"